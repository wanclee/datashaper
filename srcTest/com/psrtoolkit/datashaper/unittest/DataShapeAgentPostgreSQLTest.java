/*
 * Copyright (C) 2010-2012, Wan Lee, wan5332@gmail.com
 * Source can be obtained from git://github.com/wanclee/datashaper.git
 * BSD-style license. Please read license.txt that comes with source files
 */
/**
 *
 */
package com.psrtoolkit.datashaper.unittest;

import static org.junit.Assert.*;

import org.junit.Test;

import com.psrtoolkit.datashaper.agent.DataShapeAgent;
import com.psrtoolkit.datashaper.agent.DataShapeAgentFactory;
import com.psrtoolkit.datashaper.config.ConfigReader;
import com.psrtoolkit.datashaper.enumeration.DbType;
import com.psrtoolkit.datashaper.exception.DataShaperException;
import com.psrtoolkit.datashaper.table.TableMgr;

/**
 * @author Wan
 *
 */
public class DataShapeAgentPostgreSQLTest {

    final static String connectionInfo = "jdbc:postgresql://localhost:5432/actproj";
    final static String userName = "actproj";
    final static String password = "actproj";
    final static String sequence = TestUtil.getSequenceNamePostgreSQL();
    final static String dataShapeDefLocation = "samples/postgresql/";
    DataShapeAgent agent = null;

    @Test
    public void testConnect() {
        //positive test
        agent = DataShapeAgentFactory.createAgent(DbType.POSTGRESQL, sequence);
        Boolean result = agent.connect(connectionInfo, userName, password);
        assertTrue(result);
        agent.disconnect();
        assertTrue(true);

    }

    @Test
    public void testConnectNegative() {
        //negative test - wrong connection info
        agent = DataShapeAgentFactory.createAgent(DbType.POSTGRESQL, sequence);
        String connectionStr = connectionInfo + "junk";
        try {
            Boolean result1 = agent.connect(connectionStr, userName, password);
            assertFalse(result1); //we don't expect success
        } catch (DataShaperException dsex) {
            assertTrue(true);
        }
        agent.disconnect();
        assertTrue(true);
    }

    @Test
    public void testGenerateWithDataShapeConfigSimpleCreateCustomers() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleSimpleCreateCustomers.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigMany2ManyRelationship() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleMany2ManyRelationship.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigOne2ManyRelationship() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleOne2ManyRelationship.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigOne2OneRelationship() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleOne2OneRelationship.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigUseQuery() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseQuery.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigSeedData() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleSeedData.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigDenormColumnAndPickListColumn() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleDenormColumnAndPickListColumn.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    //Note 1: The test cannot succeed currently due to jdbc bug in PostgreSQL driver.
    //It will throw this error message: A result was returned when none was expected.
    //And it is due to RETURNING * appended to the sql when Statement.RETURN_GENERATED_KEYS
    //is specified in PreparedStatement. 
    //Note 2: (Sept 28, 2010) - even attempt to insert one row at a time using table.populateNoBatch()
    //failed. PostgreSQL throw this exception: [Caused by: org.postgresql.util.PSQLException: Returning autogenerated keys is not supported.]
    //Need to investigate if there a way to query for nextval from the local SERIAL sequence in the table. If so, we can enhance idMgrPostgreSQL
    //to pre-fetch those IDs before batch inserts.
    //Note 3: (Sept 28, 2010) Solution found and implemented. PostgreSQL support implicit sequence using the form TABLENAME_COLUMNNAME_SEQ. We could 
    //specify those sequences as local sequences in the datashape configuration and let the IdMgrPostgreSQL issue the nextval request to
    //pre-fetch the IDs. We can also alter the sequence increment amount to 100 to speed up the performance; e.g. alter sequence usr_usr_id_seq increment by 100.
    //The implementation will use table.populate() in a regular fashion.
    //Note 4: use the DDL file - actproj-postgres-implicit-sequence.ddl to create the schema before running the test.
	/*
     * @Test public void testGenerateWithDataShapeConfigImplicitSequenceOption()
     * { try { TableMgr tableMgr = new TableMgr();
     * ConfigReader.read("DataShapeConfigPostgreSQLImplicitSequence.xml",
     * tableMgr); DataShapeAgent agent =
     * DataShapeAgentFactory.createAgent(ConfigReader.getDbType(),
     * ConfigReader.getSharedSequence());
     *
     * String connectionInfo = ConfigReader.getConnectionStr(); String userName
     * = "actproj"; String password = "actproj";
     *
     * Boolean result = agent.connect(connectionInfo, userName, password);
     * agent.setTableMgr(tableMgr); result = agent.generate();
     * assertTrue(result); } catch (Exception ex) { ex.printStackTrace();
     * assertFalse(true); } }
     */
    @Test
    public void testGenerateWithDataShapeConfigUseCasesDataPreparation() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseCasesDataPreparation.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigUseCase1SmallScale() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseCase1SmallScale.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigUseCase2SmallScale() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseCase2SmallScale.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigUseCase3SmallScale() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseCase3SmallScale.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }

    @Test
    public void testGenerateWithDataShapeConfigUseCase1and2and3Combined() {
        try {
            assertTrue(TestUtil.testDataShape(dataShapeDefLocation + "POSTGRESQLExampleUseCase1and2and3Combined.xml"));
        } catch (Exception ex) {
            ex.printStackTrace();
            assertFalse(true);
        }
    }
}
